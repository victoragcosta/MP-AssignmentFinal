Header order.
Function parameter order.
Short functions (Maximum 40 lines).
Use casts.
Use pre-increment for iterators.
Use normal ints (and not unsigned ints).
Use sizeof(var name) para medir o tamanho de variÃ¡veis.
Document aliases (typedef).
Use descriptive, non-abbreviated names (Exception: i for iterator).
File names: Lower case, separated by '-' or '_'.
Type names: Camel case.
Variable and struct members names: Lower case, separated by '_'.
Function and enum names: Camel case with upper case at the start.
Macro names: Upper case separated by '_'.
Naming exceptions: Analagous names.
Be consistent with comments (// or /*).
File comments: Describes the file's contents. May be avoided if it describes, implements or tests exactly one thing. 
Struct comments: Describes what the struct contains and when it should be used. May contain a snippet example.
Function comments: Description of what the function does and how it does it. Should have:
  Inputs and outputs descritions.
  What arguments are reference and can/will be freed.
  If the function allocates memory.
  Which arguments can be NULL pointers.
  Detailment of tricks used in function.
Variable comments: Use only if necessary and for global variables.
Implementation comments: Should explain anything important, interesting or unclear about the code. Note that:
  Comments should have 2 spaces between themselves and code on the same line.
  Comment function arguments only as a last resort. Change the code around to be more explicit if possible.
  Don't state the obvious. Use self-describing code.
  Use the same style.
Use 80 characters or less per line. Exceptions should be rare, but can be made when that decision is sensible.
TAB key should equal 2 spaces.
Line parameter lists if all of them do not fit in a single line or use 2 TABs if none of them fit in a line.
Don't use spaces between a function's parenthesis, the function name and the first argument.
The opening parenthesis is always on the same line as the function name.
The opening curly brace is always at the end of the last line of the function declaration.
The closing curly brace is always at the last line by itself or on the same line as the opening curly brace.
Align arguments when doing function calls.
Use exactly one space between an if and it's opening parethesis and between the closing parenthesis and the opening curly brace.
An if condition should have no spaces between it's parenthesis.
Always put the closing curly brace of a if or else if on the same line as the else if or else, separated by one space.
Use curly braces for all if/else if/else components or for none.
Pointer operators (*, & and ->) should not have spaces between themselves and the pointer variable name or type.
Be consistent when breaking up boolean evaluations.
Don't use parenthesis in returns.
Vertical spacing should be consistent, but try to avoid starting/ending a function declaration with a blank line.
Exceptions to all of these rules can be tolerated. The overall message is: Be consistent.